////////////////////////////////////////////////////////////////
//        File: dtype.h
// Description: contents description of memory data types
//      Author: IVP
//        Date: 26.02.2007

#ifndef __DTYPE_H__
#define __DTYPE_H__

//Hierarchy_leaf::tvolume
typedef unsigned int TVOLUME;
#define TVOLUME_SIZE sizeof(TVOLUME)
#define BYTE_SIZE 8
#define TYPED_SIZE(x,y) (((x)+sizeof(y)-1)/sizeof(y))

enum flags {
	F_UNCERTAINED = 0,
	F_NODE,
	F_ARC,
	F_POSITIVE,
	F_NEGATIVE,
	F_FUZZY,
	F_TEMPORARY,
	F_PERMANENT,
	F_ACTUAL,
	F_PHANTOM,
//		F_ISOLATED,
	F_SEGMENT,
	F_AREA,
	F_LINK,
	F_REFERENCED,
//	F_PTR_MAP,
//	F_DATA,
//	F_CODE,
	F_STABLE,
	F_DEATH,
	F_SIZE
};

enum element_type {
	EMPTY		= 0,
	UNCERTAINED = 1<<F_UNCERTAINED,
	NODE        = 1<<F_NODE,
	TNODE		= NODE,
	ARC         = 1<<F_ARC,
	TOPOLOGY	= UNCERTAINED|NODE|ARC,
	POSITIVE    = 1<<F_POSITIVE,
	NEGATIVE    = 1<<F_NEGATIVE,
	FUZZY       = 1<<F_FUZZY,
	TEMPORARY   = 1<<F_TEMPORARY,
	PERMANENT   = 1<<F_PERMANENT,
	ACTUAL      = 1<<F_ACTUAL,
	PHANTOM     = 1<<F_PHANTOM,
	APP			= ARC|PERMANENT|POSITIVE,
	APN			= ARC|PERMANENT|NEGATIVE,
	APF			= ARC|PERMANENT|FUZZY,
	ATPA		= ARC|TEMPORARY|POSITIVE|ACTUAL,
	ATPP		= ARC|TEMPORARY|POSITIVE|PHANTOM,
	ATNA		= ARC|TEMPORARY|NEGATIVE|ACTUAL,
	ATNP		= ARC|TEMPORARY|NEGATIVE|PHANTOM,
	ATFA		= ARC|TEMPORARY|FUZZY|ACTUAL,
	ATFP		= ARC|TEMPORARY|FUZZY|PHANTOM,
//	ATYPE		= ATPA|ATPP|APN|APF, 
//?		ISOLATED    = 1<<F_ISOLATED,
	SEGMENT		= 1<<F_SEGMENT,
	AREA		= 1<<F_AREA,
	LINK		= 1<<F_LINK,
	TSEGMENT	= SEGMENT|NODE,
	TAREA		= AREA|NODE,
	TLINK		= LINK|TOPOLOGY,
	STABLE		= 1<<F_STABLE,
	REFERENCED	= 1<<F_REFERENCED,
	ETYPE_SIZE	= F_SIZE,
	DEATH		= 1<<F_DEATH,
	ETYPE		= TOPOLOGY|ARC|PERMANENT|TEMPORARY|POSITIVE|NEGATIVE|FUZZY|ACTUAL|PHANTOM|SEGMENT|AREA|LINK|REFERENCED|DEATH

};

enum { 
	F_PRE,
	F_POST,
	F_DATA_CHANGE,
	F_CODE_CHANGE,
	F_DELETE,
	F_NEW_IN,
	F_NEW_OUT,
	F_MERGE,
	F_TYPE_CHANGE
};

enum event_type {
	RESET					= 0,
	PRE						= 1<<F_PRE,
	POST					= 1<<F_POST,
	EVENT_DATA_CHANGE		= 1<<F_DATA_CHANGE,
	PRE_DATA_CHANGE			= PRE|EVENT_DATA_CHANGE,
	POST_DATA_CHANGE		= POST|EVENT_DATA_CHANGE,
	EVENT_CODE_CHANGE		= 1<<F_CODE_CHANGE,
	PRE_CODE_CHANGE			= PRE|EVENT_CODE_CHANGE,
	POST_CODE_CHANGE		= POST|EVENT_CODE_CHANGE,
	EVENT_CONTENT_CHANGE	= EVENT_DATA_CHANGE|EVENT_CODE_CHANGE,
	PRE_CONTENT_CHANGE		= PRE|EVENT_CONTENT_CHANGE,
	POST_CONTENT_CHANGE		= POST|EVENT_CONTENT_CHANGE,
	EVENT_DELETE			= 1<<F_DELETE,
	PRE_DELETE				= PRE|EVENT_DELETE,
	POST_DELETE				= POST|EVENT_DELETE,
	EVENT_NEW_IN			= 1<<F_NEW_IN,
	PRE_NEW_IN				= PRE|EVENT_NEW_IN,
	POST_NEW_IN				= POST|EVENT_NEW_IN,
	EVENT_NEW_OUT			= 1<<F_NEW_OUT,
	PRE_NEW_OUT				= PRE|EVENT_NEW_OUT,
	POST_NEW_OUT			= POST|EVENT_NEW_OUT,
	EVENT_NEW				= EVENT_NEW_IN|EVENT_NEW_OUT,
	PRE_NEW					= PRE|EVENT_NEW,
	POST_NEW				= POST|EVENT_NEW,
	EVENT_MERGE				= 1<<F_MERGE,
	PRE_MERGE				= PRE|EVENT_MERGE,
	POST_MERGE				= POST|EVENT_MERGE,
	EVENT_MERGE_NEW_IN		= EVENT_MERGE|EVENT_NEW_IN,
	PRE_MERGE_NEW_IN		= PRE|EVENT_MERGE_NEW_IN,
	POST_MERGE_NEW_IN		= POST|EVENT_MERGE_NEW_IN,
	EVENT_MERGE_NEW_OUT		= EVENT_MERGE|EVENT_NEW_OUT,
	PRE_MERGE_NEW_OUT		= PRE|EVENT_MERGE_NEW_OUT,
	POST_MERGE_NEW_OUT		= POST|EVENT_MERGE_NEW_OUT,
	EVENT_MERGE_NEW			= EVENT_MERGE|EVENT_NEW,
	PRE_MERGE_NEW			= PRE|EVENT_MERGE_NEW,
	POST_MERGE_NEW			= POST|EVENT_MERGE_NEW,
	EVENT_MOVE				= EVENT_DELETE|EVENT_MERGE_NEW, //LINK CHANGE
	PRE_MOVE				= PRE|EVENT_MOVE,
	POST_MOVE				= POST|EVENT_MOVE,
	EVENT_TYPE_CHANGE		= 1<<F_TYPE_CHANGE,
	PRE_TYPE_CHANGE			= PRE|EVENT_TYPE_CHANGE,
	POST_TYPE_CHANGE		= POST|EVENT_TYPE_CHANGE,
	EVENT_CHANGE			= EVENT_TYPE_CHANGE|EVENT_CONTENT_CHANGE,
	PRE_CHANGE				= PRE|EVENT_CHANGE,
	POST_CHANGE				= POST|EVENT_CHANGE,
	EVENT_SHIFT				= EVENT_MOVE|EVENT_CHANGE,
	PRE_SHIFT				= PRE|EVENT_SHIFT,
	POST_SHIFT				= POST|EVENT_SHIFT
};

#endif//__DTYPE_H__
