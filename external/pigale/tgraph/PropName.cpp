#include <TAXI/propdef.h>
#include <TAXI/Tsvector.h>
struct _PropName {
  svector<char *> name;
  svector<char *> desc;
  _PropName() : name(0,1023), desc(0,1023)
  {
   for (int i=0; i<1024; i++) desc[i]=name[i]="";
     name[0+(PROP_DRAWING)]="PROP_DRAW_COORD";
     desc[0+(PROP_DRAWING)]="Main point";
     name[256+(PROP_DRAWING)]="PROP_DRAW_COORD";
     desc[256+(PROP_DRAWING)]="Main point";
     name[512+(PROP_DRAWING)]="PROP_DRAW_COORD";
     desc[512+(PROP_DRAWING)]="Main point";
     name[768+(PROP_DRAWING)]="PROP_DRAW_COORD";
     desc[768+(PROP_DRAWING)]="Main point";
     name[0+(PROP_DRAWING+1)]="PROP_DRAW_POINT_1";
     name[256+(PROP_DRAWING+1)]="PROP_DRAW_POINT_1";
     name[512+(PROP_DRAWING+1)]="PROP_DRAW_POINT_1";
     name[768+(PROP_DRAWING+1)]="PROP_DRAW_POINT_1";
     name[0+(PROP_DRAWING+2)]="PROP_DRAW_POINT_2";
     name[256+(PROP_DRAWING+2)]="PROP_DRAW_POINT_2";
     name[512+(PROP_DRAWING+2)]="PROP_DRAW_POINT_2";
     name[768+(PROP_DRAWING+2)]="PROP_DRAW_POINT_2";
     name[0+(PROP_DRAWING+3)]="PROP_DRAW_POINT_3";
     name[256+(PROP_DRAWING+3)]="PROP_DRAW_POINT_3";
     name[512+(PROP_DRAWING+3)]="PROP_DRAW_POINT_3";
     name[768+(PROP_DRAWING+3)]="PROP_DRAW_POINT_3";
     name[0+(PROP_DRAWING+4)]="PROP_DRAW_POINT_4";
     name[256+(PROP_DRAWING+4)]="PROP_DRAW_POINT_4";
     name[512+(PROP_DRAWING+4)]="PROP_DRAW_POINT_4";
     name[768+(PROP_DRAWING+4)]="PROP_DRAW_POINT_4";
     name[0+(PROP_DRAWING+5)]="PROP_DRAW_POINT_5";
     name[256+(PROP_DRAWING+5)]="PROP_DRAW_POINT_5";
     name[512+(PROP_DRAWING+5)]="PROP_DRAW_POINT_5";
     name[768+(PROP_DRAWING+5)]="PROP_DRAW_POINT_5";
     name[0+(PROP_DRAWING+6)]="PROP_DRAW_POINT_6";
     name[256+(PROP_DRAWING+6)]="PROP_DRAW_POINT_6";
     name[512+(PROP_DRAWING+6)]="PROP_DRAW_POINT_6";
     name[768+(PROP_DRAWING+6)]="PROP_DRAW_POINT_6";
     name[0+(PROP_DRAWING+11)]="PROP_DRAW_DBLE_1";
     name[256+(PROP_DRAWING+11)]="PROP_DRAW_DBLE_1";
     name[512+(PROP_DRAWING+11)]="PROP_DRAW_DBLE_1";
     name[768+(PROP_DRAWING+11)]="PROP_DRAW_DBLE_1";
     name[0+(PROP_DRAWING+12)]="PROP_DRAW_DBLE_2";
     name[256+(PROP_DRAWING+12)]="PROP_DRAW_DBLE_2";
     name[512+(PROP_DRAWING+12)]="PROP_DRAW_DBLE_2";
     name[768+(PROP_DRAWING+12)]="PROP_DRAW_DBLE_2";
     name[0+(PROP_DRAWING+13)]="PROP_DRAW_DBLE_3";
     name[256+(PROP_DRAWING+13)]="PROP_DRAW_DBLE_3";
     name[512+(PROP_DRAWING+13)]="PROP_DRAW_DBLE_3";
     name[768+(PROP_DRAWING+13)]="PROP_DRAW_DBLE_3";
     name[0+(PROP_DRAWING+14)]="PROP_DRAW_DBLE_4";
     name[256+(PROP_DRAWING+14)]="PROP_DRAW_DBLE_4";
     name[512+(PROP_DRAWING+14)]="PROP_DRAW_DBLE_4";
     name[768+(PROP_DRAWING+14)]="PROP_DRAW_DBLE_4";
     name[0+(PROP_DRAWING+15)]="PROP_DRAW_DBLE_5";
     name[256+(PROP_DRAWING+15)]="PROP_DRAW_DBLE_5";
     name[512+(PROP_DRAWING+15)]="PROP_DRAW_DBLE_5";
     name[768+(PROP_DRAWING+15)]="PROP_DRAW_DBLE_5";
     name[0+(PROP_DRAWING+16)]="PROP_DRAW_DBLE_6";
     name[256+(PROP_DRAWING+16)]="PROP_DRAW_DBLE_6";
     name[512+(PROP_DRAWING+16)]="PROP_DRAW_DBLE_6";
     name[768+(PROP_DRAWING+16)]="PROP_DRAW_DBLE_6";
     name[0+(PROP_DRAWING+17)]="PROP_DRAW_DBLE_MIN";
     name[256+(PROP_DRAWING+17)]="PROP_DRAW_DBLE_MIN";
     name[512+(PROP_DRAWING+17)]="PROP_DRAW_DBLE_MIN";
     name[768+(PROP_DRAWING+17)]="PROP_DRAW_DBLE_MIN";
     name[0+(PROP_DRAWING+18)]="PROP_DRAW_DBLE_MAX";
     name[256+(PROP_DRAWING+18)]="PROP_DRAW_DBLE_MAX";
     name[512+(PROP_DRAWING+18)]="PROP_DRAW_DBLE_MAX";
     name[768+(PROP_DRAWING+18)]="PROP_DRAW_DBLE_MAX";
     name[0+(PROP_DRAWING+21)]="PROP_DRAW_INT_1";
     name[256+(PROP_DRAWING+21)]="PROP_DRAW_INT_1";
     name[512+(PROP_DRAWING+21)]="PROP_DRAW_INT_1";
     name[768+(PROP_DRAWING+21)]="PROP_DRAW_INT_1";
     name[0+(PROP_DRAWING+22)]="PROP_DRAW_INT_2";
     name[256+(PROP_DRAWING+22)]="PROP_DRAW_INT_2";
     name[512+(PROP_DRAWING+22)]="PROP_DRAW_INT_2";
     name[768+(PROP_DRAWING+22)]="PROP_DRAW_INT_2";
     name[0+(PROP_DRAWING+23)]="PROP_DRAW_INT_3";
     name[256+(PROP_DRAWING+23)]="PROP_DRAW_INT_3";
     name[512+(PROP_DRAWING+23)]="PROP_DRAW_INT_3";
     name[768+(PROP_DRAWING+23)]="PROP_DRAW_INT_3";
     name[0+(PROP_DRAWING+24)]="PROP_DRAW_INT_4";
     name[256+(PROP_DRAWING+24)]="PROP_DRAW_INT_4";
     name[512+(PROP_DRAWING+24)]="PROP_DRAW_INT_4";
     name[768+(PROP_DRAWING+24)]="PROP_DRAW_INT_4";
     name[0+(PROP_DRAWING+25)]="PROP_DRAW_INT_5";
     name[256+(PROP_DRAWING+25)]="PROP_DRAW_INT_5";
     name[512+(PROP_DRAWING+25)]="PROP_DRAW_INT_5";
     name[768+(PROP_DRAWING+25)]="PROP_DRAW_INT_5";
     name[0+(PROP_DRAWING+26)]="PROP_DRAW_INT_6";
     name[256+(PROP_DRAWING+26)]="PROP_DRAW_INT_6";
     name[512+(PROP_DRAWING+26)]="PROP_DRAW_INT_6";
     name[768+(PROP_DRAWING+26)]="PROP_DRAW_INT_6";
     name[0+(200)]="PROP_RESERVED";
     desc[0+(200)]="Reserved for applications ";
     name[256+(200)]="PROP_RESERVED";
     desc[256+(200)]="Reserved for applications ";
     name[512+(200)]="PROP_RESERVED";
     desc[512+(200)]="Reserved for applications ";
     name[768+(200)]="PROP_RESERVED";
     desc[768+(200)]="Reserved for applications ";
     name[0+(255)]="PROP_TMP";
     desc[0+(255)]="Temporary property";
     name[256+(255)]="PROP_TMP";
     desc[256+(255)]="Temporary property";
     name[512+(255)]="PROP_TMP";
     desc[512+(255)]="Temporary property";
     name[768+(255)]="PROP_TMP";
     desc[768+(255)]="Temporary property";
     name[0+(0)]="PROP_TITRE";
     desc[0+(0)]="Graph Title";
     name[0+(1)]="PROP_CONNECTED";
     desc[0+(1)]="Graph is connected";
     name[0+(2)]="PROP_BICONNECTED";
     desc[0+(2)]="Graph is biconnected";
     name[0+(3)]="PROP_TRICONNECTED";
     desc[0+(3)]="Graph is triconnected";
     name[0+(4)]="PROP_FOURCONNECTED";
     desc[0+(4)]="Graph is 4-connected";
     name[0+(5)]="PROP_PLANAR";
     desc[0+(5)]="Graph is planar";
     name[0+(6)]="PROP_PLANARMAP";
     desc[0+(6)]="Graph is planar embedded";
     name[0+(7)]="PROP_N";
     desc[0+(7)]="Number of vertices (backup)";
     name[0+(8)]="PROP_M";
     desc[0+(8)]="Number of edges (backup)";
     name[0+(9)]="PROP_EXTBRIN";
     desc[0+(9)]="External brin (defines outer face)";
     name[0+(10)]="PROP_SIMPLE";
     desc[0+(10)]="Graph is simple";
     name[0+(12)]="PROP_BIPARTITE";
     desc[0+(12)]="Graph is bipartite";
     name[0+(13)]="PROP_MAPTYPE";
     desc[0+(13)]="Embedding type";
     name[0+(14)]="PROP_SYM";
     desc[0+(14)]="Has a symetric labeling";
     name[0+(15)]="PROP_HYPERGRAPH";
     desc[0+(15)]="Graph is an hypergraph";
     name[0+(16)]="PROP_NV";
     desc[0+(16)]="#hyper-vertices/red vertices";
     name[0+(17)]="PROP_NE";
     desc[0+(17)]="#hyper-edgees/blue vertices";
     name[0+(18)]="PROP_NCV";
     desc[0+(18)]="# classes for vertices";
     name[0+(19)]="PROP_NCE";
     desc[0+(19)]="# classes for edges";
     name[0+(30)]="PROP_NLOOPS";
     desc[0+(30)]="no loops";
     name[0+(31)]="PROP_MN";
     desc[0+(31)]="#meta vertices";
     name[0+(32)]="PROP_MM";
     desc[0+(32)]="#meta edges";
     name[0+(33)]="PROP_VSLABEL";
     desc[0+(33)]="> numerical label to string label for vertices";
     name[0+(34)]="PROP_ESLABEL";
     desc[0+(34)]="> numerical label to string label for edges";
     name[0+(PROP_DRAWING+1)]="PROP_POINT_MIN";
     name[0+(PROP_DRAWING+2)]="PROP_POINT_MAX";
     name[0+(PROP_DRAWING+3)]="PROP_RNEMBED";
     name[256+(0)]="PROP_LABEL";
     desc[256+(0)]="Label";
     name[512+(0)]="PROP_LABEL";
     desc[512+(0)]="Label";
     name[768+(0)]="PROP_LABEL";
     desc[768+(0)]="Label";
     name[256+(1)]="PROP_COLOR";
     desc[256+(1)]="Color";
     name[512+(1)]="PROP_COLOR";
     desc[512+(1)]="Color";
     name[768+(1)]="PROP_COLOR";
     desc[768+(1)]="Color";
     name[256+(2)]="PROP_MARK";
     desc[256+(2)]="Various marks";
     name[512+(2)]="PROP_MARK";
     desc[512+(2)]="Various marks";
     name[768+(2)]="PROP_MARK";
     desc[768+(2)]="Various marks";
     name[256+(7)]="PROP_TYPE";
     desc[256+(7)]="Associated type";
     name[512+(7)]="PROP_TYPE";
     desc[512+(7)]="Associated type";
     name[768+(7)]="PROP_TYPE";
     desc[768+(7)]="Associated type";
     name[256+(8)]="PROP_FLAGS";
     desc[256+(8)]="Various Flags";
     name[512+(8)]="PROP_FLAGS";
     desc[512+(8)]="Various Flags";
     name[768+(8)]="PROP_FLAGS";
     desc[768+(8)]="Various Flags";
     name[256+(9)]="PROP_ORDER";
     desc[256+(9)]="Priority order";
     name[512+(9)]="PROP_ORDER";
     desc[512+(9)]="Priority order";
     name[768+(9)]="PROP_ORDER";
     desc[768+(9)]="Priority order";
     name[256+(10)]="PROP_PMETA";
     desc[256+(10)]="First meta brin";
     name[512+(10)]="PROP_PMETA";
     desc[512+(10)]="First meta brin";
     name[768+(10)]="PROP_PMETA";
     desc[768+(10)]="First meta brin";
     name[256+(11)]="PROP_BIRTH";
     desc[256+(11)]="Start of validity";
     name[512+(11)]="PROP_BIRTH";
     desc[512+(11)]="Start of validity";
     name[768+(11)]="PROP_BIRTH";
     desc[768+(11)]="Start of validity";
     name[256+(12)]="PROP_DEATH";
     desc[256+(12)]="End of validity";
     name[512+(12)]="PROP_DEATH";
     desc[512+(12)]="End of validity";
     name[768+(12)]="PROP_DEATH";
     desc[768+(12)]="End of validity";
     name[256+(13)]="PROP_VALUE";
     desc[256+(13)]="A value";
     name[512+(13)]="PROP_VALUE";
     desc[512+(13)]="A value";
     name[768+(13)]="PROP_VALUE";
     desc[768+(13)]="A value";
     name[256+(15)]="PROP_SLABEL";
     desc[256+(15)]="String label index";
     name[512+(15)]="PROP_SLABEL";
     desc[512+(15)]="String label index";
     name[768+(15)]="PROP_SLABEL";
     desc[768+(15)]="String label index";
     name[256+(3)]="PROP_INITIALV";
     desc[256+(3)]="Initial Numbering";
     name[256+(4)]="PROP_NEW";
     desc[256+(4)]="New numbering";
     name[256+(5)]="PROP_CLASSV";
     desc[256+(5)]="Class of vertex";
     name[256+(6)]="PROP_REPRESENTATIVEV";
     desc[256+(6)]="Representative of vertex";
     name[256+(16)]="PROP_COORD";
     desc[256+(16)]="Coord for editor";
     name[256+(17)]="PROP_PBRIN";
     desc[256+(17)]="First incident brin";
     name[256+(18)]="PROP_STLINK";
     desc[256+(18)]="link of st-ordering";
     name[256+(19)]="PROP_LOW";
     desc[256+(19)]="DFS low";
     name[256+(20)]="PROP_ELOW";
     desc[256+(20)]="DFS edge-low";
     name[256+(21)]="PROP_TSTATUS";
     desc[256+(21)]="Status of vertex or incoming tree";
     name[256+(22)]="PROP_DUALORDER";
     desc[256+(22)]="DFS Dual Order (Kura)";
     name[256+(25)]="PROP_DEGREE";
     desc[256+(25)]="vertex degree";
     name[256+(26)]="PROP_SYMLABEL";
     desc[256+(26)]="label in the symetry";
     name[256+(28)]="PROP_REDUCED";
     desc[256+(28)]="class in reduced graph";
     name[256+(29)]="PROP_HYPEREDGE";
     desc[256+(29)]="vertex is an hyperedge";
     name[256+(30)]="PROP_NLOOPS";
     desc[256+(30)]="# of attached loops";
     name[256+(PROP_DRAWING+31)]="PROP_COORD3";
     desc[256+(PROP_DRAWING+31)]="Coord for Embed3d";
     name[256+(PROP_NOTSAVED+32)]="PROP_EIGEN";
     desc[256+(PROP_NOTSAVED+32)]="eigenvalues for Embed3d";
     name[256+(PROP_NOTSAVED+1)]="PROP_CANVAS_ITEM";
     desc[256+(PROP_NOTSAVED+1)]="NodeItem";
     name[256+(PROP_NOTSAVED+2)]="PROP_CANVAS_COORD";
     desc[256+(PROP_NOTSAVED+2)]="Copy Coord for editor";
     name[512+(3)]="PROP_INITIALE";
     desc[512+(3)]="Initial Numbering";
     name[512+(5)]="PROP_CLASSE";
     desc[512+(5)]="Class of edge";
     name[512+(6)]="PROP_REPRESENTATIVEE";
     desc[512+(6)]="Representative of edge";
     name[512+(14)]="PROP_COLOR2";
     desc[512+(14)]="Color of the second brin";
     name[512+(16)]="PROP_WIDTH";
     desc[512+(16)]="geometric width (editor)";
     name[512+(17)]="PROP_ORIENTED";
     desc[512+(17)]="edge is oriented";
     name[512+(18)]="PROP_REORIENTED";
     desc[512+(18)]="orientation should be reversed";
     name[512+(19)]="PROP_ISTREE";
     desc[512+(19)]="edge belongs to the tree";
     name[512+(20)]="PROP_MULTIPLICITY";
     desc[512+(20)]="edge multiplicity";
     name[512+(PROP_NOTSAVED+1)]="PROP_CANVAS_ITEM";
     desc[512+(PROP_NOTSAVED+1)]="EdgeItem";
     name[512+(PROP_NOTSAVED+2)]="PROP_ISTREE_LR";
     desc[512+(PROP_NOTSAVED+2)]="edge belongs to the tree of the LR-algorithm";
     name[768+(3)]="PROP_INITIALB";
     desc[768+(3)]="Initial Numbering";
     name[768+(5)]="PROP_CLASSB";
     desc[768+(5)]="Class of brin";
     name[768+(16)]="PROP_VIN";
     desc[768+(16)]="vertex incidence";
     name[768+(18)]="PROP_CIR";
     desc[768+(18)]="next brin in circular order";
     name[768+(19)]="PROP_ACIR";
     desc[768+(19)]="previous brin in circular order";
  }
};
static _PropName pname;
char *PropName(int s, int i) { return pname.name[s*256+i];}
char *PropDesc(int s, int i) { return pname.desc[s*256+i];}
